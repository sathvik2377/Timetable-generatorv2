# Generated by Django 4.2.7 on 2025-09-18 03:41

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import timetable.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Branch',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('code', models.CharField(max_length=10, unique=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('head', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='headed_branches', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Branch',
                'verbose_name_plural': 'Branches',
            },
        ),
        migrations.CreateModel(
            name='ClassGroup',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
                ('year', models.IntegerField()),
                ('section', models.CharField(default='A', max_length=5)),
                ('semester', models.IntegerField(default=1)),
                ('strength', models.IntegerField(default=60)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('branch', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='class_groups', to='timetable.branch')),
                ('coordinator', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='coordinated_classes', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Class Group',
                'verbose_name_plural': 'Class Groups',
                'unique_together': {('branch', 'year', 'section')},
            },
        ),
        migrations.CreateModel(
            name='Institution',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('type', models.CharField(choices=[('school', 'School Level'), ('college', 'College Level'), ('university', 'University Level')], default='college', max_length=20)),
                ('address', models.TextField(blank=True, null=True)),
                ('phone', models.CharField(blank=True, max_length=15, null=True)),
                ('email', models.EmailField(blank=True, max_length=254, null=True)),
                ('website', models.URLField(blank=True, null=True)),
                ('academic_year', models.CharField(default='2024-25', max_length=20)),
                ('start_time', models.TimeField(default='09:00:00')),
                ('end_time', models.TimeField(default='17:00:00')),
                ('slot_duration', models.IntegerField(default=60, help_text='Duration in minutes')),
                ('lunch_break_start', models.TimeField(default='13:00:00')),
                ('lunch_break_end', models.TimeField(default='14:00:00')),
                ('working_days', models.JSONField(default=timetable.models.default_working_days, help_text='List of working days (e.g., ["Mon","Tue","Wed","Thu","Fri"])')),
                ('max_teacher_hours_per_week', models.IntegerField(default=24, help_text='Maximum teaching hours per teacher per week (NEP-2020 compliant)', validators=[django.core.validators.MinValueValidator(12), django.core.validators.MaxValueValidator(40)])),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Institution',
                'verbose_name_plural': 'Institutions',
            },
        ),
        migrations.CreateModel(
            name='Room',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
                ('code', models.CharField(max_length=20, unique=True)),
                ('type', models.CharField(choices=[('classroom', 'Classroom'), ('laboratory', 'Laboratory'), ('seminar_hall', 'Seminar Hall'), ('auditorium', 'Auditorium'), ('library', 'Library')], default='classroom', max_length=20)),
                ('capacity', models.IntegerField(default=60)),
                ('has_projector', models.BooleanField(default=False)),
                ('has_computer', models.BooleanField(default=False)),
                ('has_whiteboard', models.BooleanField(default=True)),
                ('has_ac', models.BooleanField(default=False)),
                ('building', models.CharField(blank=True, max_length=50, null=True)),
                ('floor', models.IntegerField(default=1)),
                ('is_active', models.BooleanField(default=True)),
                ('availability', models.JSONField(default=dict, help_text='Day-wise availability slots')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('institution', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='rooms', to='timetable.institution')),
            ],
            options={
                'verbose_name': 'Room',
                'verbose_name_plural': 'Rooms',
                'unique_together': {('institution', 'code')},
            },
        ),
        migrations.CreateModel(
            name='Subject',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(max_length=20)),
                ('name', models.CharField(max_length=200)),
                ('type', models.CharField(choices=[('theory', 'Theory'), ('lab', 'Laboratory'), ('project', 'Project Work'), ('ability_enhancement', 'Ability Enhancement'), ('core', 'Core Subject'), ('elective', 'Elective Subject'), ('skill', 'Skill Development')], default='core', max_length=20)),
                ('credits', models.IntegerField(default=3)),
                ('semester', models.IntegerField(default=1)),
                ('year', models.IntegerField(default=1)),
                ('theory_hours', models.IntegerField(default=3, help_text='Theory hours per week')),
                ('practical_hours', models.IntegerField(default=0, help_text='Practical hours per week')),
                ('tutorial_hours', models.IntegerField(default=0, help_text='Tutorial hours per week')),
                ('weekly_hours', models.IntegerField(default=3, help_text='Total weekly hours for this subject', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(10)])),
                ('minutes_per_slot', models.IntegerField(default=60, help_text='Duration of each class slot in minutes', validators=[django.core.validators.MinValueValidator(30), django.core.validators.MaxValueValidator(180)])),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('branch', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='subjects', to='timetable.branch')),
                ('prerequisites', models.ManyToManyField(blank=True, to='timetable.subject')),
            ],
            options={
                'verbose_name': 'Subject',
                'verbose_name_plural': 'Subjects',
                'unique_together': {('branch', 'code')},
            },
        ),
        migrations.CreateModel(
            name='Teacher',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('employee_id', models.CharField(max_length=20, unique=True)),
                ('designation', models.CharField(choices=[('professor', 'Professor'), ('associate_professor', 'Associate Professor'), ('assistant_professor', 'Assistant Professor'), ('lecturer', 'Lecturer'), ('visiting_faculty', 'Visiting Faculty')], default='assistant_professor', max_length=30)),
                ('specialization', models.CharField(blank=True, max_length=200, null=True)),
                ('qualification', models.CharField(blank=True, max_length=200, null=True)),
                ('experience_years', models.IntegerField(default=0)),
                ('max_hours_per_day', models.IntegerField(default=6)),
                ('max_hours_per_week', models.IntegerField(default=24)),
                ('max_consecutive_hours', models.IntegerField(default=3)),
                ('availability', models.JSONField(default=dict, help_text='Day-wise availability slots')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('classes_assigned', models.ManyToManyField(blank=True, help_text='Branches/Classes this teacher is assigned to', related_name='assigned_teachers', to='timetable.branch')),
                ('department', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='teachers', to='timetable.branch')),
            ],
            options={
                'verbose_name': 'Teacher',
                'verbose_name_plural': 'Teachers',
            },
        ),
        migrations.CreateModel(
            name='Timetable',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('academic_year', models.CharField(max_length=20)),
                ('semester', models.IntegerField(default=1)),
                ('status', models.CharField(choices=[('draft', 'Draft'), ('active', 'Active'), ('archived', 'Archived')], default='draft', max_length=20)),
                ('version', models.IntegerField(default=1)),
                ('generation_time', models.DurationField(blank=True, null=True)),
                ('algorithm_used', models.CharField(default='OR-Tools CP-SAT', max_length=50)),
                ('generation_parameters', models.JSONField(default=dict, help_text='Parameters used during generation')),
                ('total_sessions', models.IntegerField(default=0)),
                ('conflicts_resolved', models.IntegerField(default=0)),
                ('optimization_score', models.FloatField(default=0.0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('generated_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='generated_timetables', to=settings.AUTH_USER_MODEL)),
                ('institution', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='timetables', to='timetable.institution')),
            ],
            options={
                'verbose_name': 'Timetable',
                'verbose_name_plural': 'Timetables',
                'unique_together': {('institution', 'academic_year', 'semester', 'version')},
            },
        ),
        migrations.CreateModel(
            name='TimetableConstraint',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('type', models.CharField(choices=[('teacher_availability', 'Teacher Availability'), ('room_availability', 'Room Availability'), ('no_consecutive_subjects', 'No Consecutive Same Subject'), ('lunch_break', 'Lunch Break'), ('max_hours_per_day', 'Maximum Hours Per Day'), ('preferred_time_slots', 'Preferred Time Slots')], max_length=30)),
                ('parameters', models.JSONField(default=dict, help_text='Constraint-specific parameters')),
                ('priority', models.IntegerField(default=5, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(10)])),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('institution', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='constraints', to='timetable.institution')),
            ],
            options={
                'verbose_name': 'Timetable Constraint',
                'verbose_name_plural': 'Timetable Constraints',
            },
        ),
        migrations.CreateModel(
            name='TeacherSubject',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('preference_level', models.IntegerField(default=3, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('can_teach_theory', models.BooleanField(default=True)),
                ('can_teach_practical', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('subject', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='timetable.subject')),
                ('teacher', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='timetable.teacher')),
            ],
            options={
                'verbose_name': 'Teacher Subject Assignment',
                'verbose_name_plural': 'Teacher Subject Assignments',
                'unique_together': {('teacher', 'subject')},
            },
        ),
        migrations.AddField(
            model_name='teacher',
            name='subjects',
            field=models.ManyToManyField(related_name='teachers', through='timetable.TeacherSubject', to='timetable.subject'),
        ),
        migrations.AddField(
            model_name='teacher',
            name='subjects_taught',
            field=models.ManyToManyField(blank=True, help_text='Subjects this teacher is qualified to teach', related_name='qualified_teachers', to='timetable.subject'),
        ),
        migrations.AddField(
            model_name='teacher',
            name='user',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='teacher_profile', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='branch',
            name='institution',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='branches', to='timetable.institution'),
        ),
        migrations.CreateModel(
            name='TimetableSession',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('day_of_week', models.IntegerField(help_text='0=Monday, 6=Sunday')),
                ('start_time', models.TimeField()),
                ('end_time', models.TimeField()),
                ('session_type', models.CharField(choices=[('theory', 'Theory Class'), ('practical', 'Practical/Lab'), ('tutorial', 'Tutorial'), ('break', 'Break'), ('lunch', 'Lunch Break')], default='theory', max_length=20)),
                ('notes', models.TextField(blank=True, null=True)),
                ('is_fixed', models.BooleanField(default=False, help_text='Cannot be moved during editing')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('class_group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='timetable.classgroup')),
                ('room', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='timetable.room')),
                ('subject', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='timetable.subject')),
                ('teacher', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='timetable.teacher')),
                ('timetable', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sessions', to='timetable.timetable')),
            ],
            options={
                'verbose_name': 'Timetable Session',
                'verbose_name_plural': 'Timetable Sessions',
                'unique_together': {('timetable', 'day_of_week', 'start_time', 'class_group')},
            },
        ),
        migrations.AlterUniqueTogether(
            name='branch',
            unique_together={('institution', 'code')},
        ),
    ]
